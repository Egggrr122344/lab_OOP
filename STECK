
// Стек на основе массива 
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#define N 9 // размер стека
typedef int Data ;
typedef struct  {
    Data a[N]; // данные 
   unsigned int n; // сколько элементов в стеке
} Stack;
bool IsEmpty (Stack *st) {
    if ( st -> n == 0) return true;
    return false;

}
bool IsFull (Stack *st) {
    if ( st->n==N) return true;
    return false;
}
void Print_St (Stack *st ) {
    bool k = IsEmpty(st);
    if ( !k) {
    for (  int i = 0; i < st -> n; i ++) {
    
        printf("%d ", st -> a[i]);
        
    }
    printf("\n");
    }
    else {
        printf("Stack is Empty\n");
    }
}
void Init_Stack (Stack* st) {
    st -> n = 0;

}
void Push_to_Stack(Stack* st, Data d) {
    bool k = IsFull(st);
    if (!k) {
        st -> a[st -> n] = d;
        st -> n++;
    }
    else printf("Stack is already full\n");
    
}
Data Pop_from_Stack(Stack* st ) {
    bool k = IsEmpty(st);
    if (!k) {
        Data rez = st -> a[st -> n - 1];
        st -> n--;
        return rez; 
    }
        
}
void Sort(Stack* st) {
    for (int i = 0; i < st -> n - 1; i++)
  {
    for (int j = (st -> n - 1); j > i; j--) // для всех элементов после i-ого
    {
      if (st -> a[j - 1] > st -> a[j]) // если текущий элемент меньше предыдущего
      {
        int temp = st -> a[j - 1]; // меняем их местами
        st -> a[j - 1] = st -> a[j];
        st -> a[j] = temp;
      }
    }
  }
}

int main() {
    Stack s ;
    Stack* st = (Stack*)malloc(sizeof(Stack));
    Init_Stack(st); // инициализируем стек (указатель на первый элемент 0)
    char c; // Вводим символ для работы 
    Data m; // вводим элемент в стек с клавиатуры
    Data b; // данные из стека 
        while(true) {
        printf("\n");
         printf( " Enter 'a' if u want to push element to stack\n Enter 'b' if u want to pop element from stack\n Enter 'm' if u want to delete max element from the stack\n Enter 'e' if u want to exit\n \n");
         scanf("%s", &c);
         if (c == 'a') { 
              printf("Enter the element: ");
              scanf("%d", &m);
              Push_to_Stack(st, m);
             Print_St(st);
            printf("kol-vo elementov: %d\n", st->n);

        }
         if (c == 'b') {
            b = Pop_from_Stack(st);
            printf("Element: %d\n", b);
             Print_St(st);
            printf("kol-vo elementov: %d\n", st->n);
        }
        if ( c == 'e') {
            return 0;
        }
        if (c == 'm') {
            Sort(st);
            b = Pop_from_Stack(st);
            Print_St(st);
            printf("kol-vo elementov: %d\n", st->n);
        } 

    
}

    
    

}
